//Divide and Conquer using Parallelization 
//Code for all 8 processors
0:

divide(s1,s1,s2);
send(s2, P4);
divide(s1,s1,s2);
send(s2,P2);
divide(s1,s1,s2);
send(s2,P1);
part_sum = *s1; //combining or applying any operation to the list s1
recv(&part_sum1,P1);
part_sum += part_sum1;
recv(&part_sum1,P2);
part_sum += part_sum1;
recv(&part_sum1,P4);
part_sum += part_sum1;

1:

recv(s1,P0);
part_sum = *s1; //combine values of list s1
send(&part_sum,P0);

2:

recv(s1,P0);
divide(s1,s1,s2);
send(s2,P3);
part_sum = *s1; //combine values of list s1 in P2
recv(&part_sum1, P3);
part_sum += part_sum1;
send(&part_sum,P0);

3:

recv(s1,P2);
part_sum = *s1; //combine values of list s1 in P3
send(&part_sum,P2);

4:

recv(S1,P0);
divide(s1,s1,s2);
send(s2,P6);
divide(s1,s1,s2);
send(s2,P5);
part_sum = *s1; //combine values of list s1 in P4
recv(&part_sum1,P5);
part_sum += part_sum1;
recv(&part_sum1,P6);
part_sum += part_sum1;
send(&part_sum,P0);

5:

recv(s1,P4);
part_sum = *s1; //combine values of list s1 in P5
send(&part_sum,P4);

6:

recv(s1,P4);
divide(s1,s1,s2);
send(s2,P7);
part_sum = *s1; //combine values of list s1 in P6
recv(&part_sum1,P7);
part_sum += part_sum1;
send(&part_sum,P4);

7:

recv(s1,P6);
part_sum = *s1; //combine values of list s1 in P7
send(&part_sum,P6);
